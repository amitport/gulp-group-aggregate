// Generated by CoffeeScript 1.10.0
(function() {
  var File, Promise, _;

  _ = require('highland');

  File = require('vinyl');

  Promise = require('bluebird');


  /*
  @callback groupBy
  @param {*} obj - gets any object from the stream 
  @returns {string} the group that obj belongs to
   */


  /*
  @callback aggregate
  @param {string} group - the name of the group
  @param {*[]} objects - and array of all the objects of the group
  @returns {File.options} input for creating a new vinyl file (see https://github.com/wearefractal/vinyl)
   */


  /*
  @param {groupBy} 
  @param {aggregate}
   */

  module.exports = function(arg) {
    var aggregate, group;
    group = arg.group, aggregate = arg.aggregate;
    aggregate = Promise.method(aggregate);
    return _.pipeline(_.group(group), _.map(function(grouped) {
      var objects;
      return _((function() {
        var results;
        results = [];
        for (group in grouped) {
          objects = grouped[group];
          results.push(_(aggregate(group, objects).then(function(aggregated) {
            return new File(aggregated);
          })));
        }
        return results;
      })()).sequence();
    }), _.sequence());
  };

}).call(this);
